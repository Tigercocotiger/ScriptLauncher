import SwiftUI
import Combine
import Cocoa

struct ContentView: View {
    // MARK: - Properties
    @State private var scripts: [ScriptFile] = []
    @State private var selectedScript: ScriptFile? // Maintenu pour la compatibilit√©
    @State private var errorMessage: String = ""
    @State private var searchText: String = ""
    @State private var showFavoritesOnly: Bool = false
    @State private var showHelp: Bool = false
    @State private var isDarkMode: Bool = false
    @State private var isGridView: Bool = false
    @State private var targetFolderPath: String = ConfigManager.shared.folderPath
    @FocusState private var isSearchFieldFocused: Bool
    
    // Variable pour l'animation de feu d'artifice
    @State private var showGlobalFirework: Bool = false
    
    // √âtat pour v√©rifier si le script de configuration est disponible
    @State private var isConfiguratorAvailable: Bool = false
    
    // Nouvelles propri√©t√©s pour la s√©lection multiple
    @State private var selectedScripts: [UUID] = []
    
    // Propri√©t√©s pour les tags
    @StateObject private var tagsViewModel = TagsViewModel()
    // ID de rafra√Æchissement pour forcer la mise √† jour des vues
    @State private var viewRefreshID = UUID()
    
    // Propri√©t√©s pour l'ex√©cution multiple avec timer
    @StateObject private var runningScriptsVM = RunningScriptsViewModel()
    @StateObject private var scriptManager = ScriptProcessManager()
    @State private var cancellables = Set<AnyCancellable>()
    
    // Nombre de scripts s√©lectionn√©s
    private var selectedScriptsCount: Int {
        scripts.filter { $0.isSelected }.count
    }
    
    // Liste des sections d'aide
    private let helpSections = [
        HelpSection(
            title: "Raccourcis clavier",
            content: """
            ‚Ä¢ ‚åò + Entr√©e : Ex√©cuter le script s√©lectionn√©
            ‚Ä¢ ‚åò + ‚áß + Entr√©e : Ex√©cuter tous les scripts s√©lectionn√©s
            ‚Ä¢ ‚åò + ‚å• + A : S√©lectionner tous les scripts visibles
            ‚Ä¢ ‚åò + I : Afficher/masquer l'aide
            ‚Ä¢ ‚åò + S : Ajouter/retirer des favoris
            ‚Ä¢ ‚åò + G : Basculer entre vue liste et grille
            ‚Ä¢ ‚åò + D : Basculer entre mode clair et sombre
            ‚Ä¢ ‚åò + . : Arr√™ter tous les scripts en cours
            ‚Ä¢ √âchap : Annuler la recherche ou fermer l'aide
            """
        ),
        HelpSection(
            title: "S√©lection multiple",
            content: """
            Vous pouvez s√©lectionner plusieurs scripts pour les ex√©cuter en m√™me temps :
            
            1. Cochez les cases √† c√¥t√© des scripts que vous souhaitez ex√©cuter
            2. Utilisez le raccourci ‚åò + ‚å• + A pour s√©lectionner tous les scripts visibles
            3. Utilisez les boutons "Tout s√©lectionner" ou "D√©s√©lectionner tout" 
            4. Cliquez sur "Ex√©cuter X scripts" pour lancer tous les scripts s√©lectionn√©s
            
            La s√©lection multiple vous permet d'automatiser plusieurs t√¢ches simultan√©ment.
            """
        ),
        HelpSection(
            title: "Gestion des tags",
            content: """
            Les tags vous permettent d'organiser vos scripts en groupes :
            
            1. Cliquez sur l'ic√¥ne de tag √† c√¥t√© d'un script pour ajouter ou modifier ses tags
            2. Vous pouvez cr√©er de nouveaux tags avec des couleurs personnalis√©es
            3. Utilisez les tags pour identifier rapidement les types de scripts
            
            Les tags sont automatiquement sauvegard√©s et conserv√©s entre les sessions.
            """
        ),
        HelpSection(
            title: "Gestion des favoris",
            content: """
            Pour ajouter un script aux favoris :
            ‚Ä¢ Cliquez sur l'ic√¥ne d'√©toile √† c√¥t√© du script
            ‚Ä¢ S√©lectionnez le script et utilisez ‚åò + S
            
            Pour n'afficher que les favoris :
            ‚Ä¢ Activez le bouton d'√©toile dans la barre de recherche
            
            Les favoris sont automatiquement sauvegard√©s dans les pr√©f√©rences de l'application.
            """
        ),
        HelpSection(
            title: "Scripts en cours d'ex√©cution",
            content: """
            La section "Scripts en cours d'ex√©cution" vous permet de :
            
            ‚Ä¢ Visualiser tous les scripts actuellement en ex√©cution
            ‚Ä¢ Suivre leur progression et leur temps d'ex√©cution
            ‚Ä¢ Arr√™ter un script sp√©cifique ou tous les scripts
            ‚Ä¢ Consulter le r√©sultat d'un script en le s√©lectionnant
            
            Le code couleur indique l'√©tat de chaque script :
            üü† En cours  üü¢ Termin√©  üî¥ Erreur
            """
        ),
        HelpSection(
            title: "Recherche et filtrage",
            content: """
            La barre de recherche vous permet de filtrer rapidement vos scripts :
            
            ‚Ä¢ Tapez un terme pour filtrer les scripts par nom
            ‚Ä¢ Combinez la recherche avec le filtre de favoris
            ‚Ä¢ Appuyez sur √âchap pour effacer la recherche
            
            Le r√©sultat de la recherche s'affiche instantan√©ment dans la liste des scripts.
            """
        ),
        HelpSection(
            title: "Dossier cible",
            content: """
            Vous pouvez changer le dossier contenant vos scripts en cliquant sur le bouton 
            en forme d'engrenage en haut de l'application.
            
            Le dossier s√©lectionn√© doit contenir des fichiers .scpt ou .applescript pour √™tre valide.
            
            Le chemin du dossier est sauvegard√© avec l'application et sera conserv√© m√™me si vous 
            d√©placez l'application sur une cl√© USB.
            """
        ),
    ]
    
    // MARK: - Body
    var body: some View {
        GeometryReader { geometry in
            ZStack {
                // Fond d'√©cran global
                DesignSystem.backgroundColor(for: isDarkMode)
                    .ignoresSafeArea()
                
                if geometry.size.width > 700 {
                    // Vue horizontale pour les grandes fen√™tres
                    HStack(alignment: .top, spacing: DesignSystem.spacing) {
                        scriptsSection
                            .frame(width: geometry.size.width * 0.62 - DesignSystem.spacing)
                            .id(viewRefreshID) // Forcer le rechargement lors des modifications de tags
                        
                        VStack(spacing: DesignSystem.spacing) {
                            // Bouton de configuration
                            ConfigButton(
                                isDarkMode: isDarkMode,
                                isEnabled: isConfiguratorAvailable,
                                onConfigPressed: {
                                    // Lancer le script Configurator3000
                                    launchConfiguratorScript()
                                    
                                    // D√©clencher le feu d'artifice centr√©
                                    showGlobalFirework = true
                                }
                            )
                            
                            // Section des scripts en cours d'ex√©cution
                            RunningScriptsView(
                                viewModel: runningScriptsVM,
                                isDarkMode: isDarkMode,
                                onScriptSelect: { scriptId in
                                    runningScriptsVM.selectScript(id: scriptId)
                                },
                                onScriptCancel: cancelScript
                            )
                            .frame(height: 300)
                            .padding(0)
                            
                            // Section des r√©sultats
                            MultiResultSection(
                                viewModel: runningScriptsVM,
                                isDarkMode: isDarkMode
                            )
                            .frame(maxHeight: .infinity)
                        }
                        .padding(.top, 0)
                        .padding(.trailing, DesignSystem.spacing)
                        .frame(width: geometry.size.width * 0.38 - DesignSystem.spacing)
                    }
                    .padding(DesignSystem.spacing)
                } else {
                    // Vue verticale pour les petites fen√™tres
                    VStack(alignment: .leading, spacing: DesignSystem.spacing) {
                        scriptsSection
                            .frame(height: geometry.size.height * 0.5)
                            .id(viewRefreshID) // Forcer le rechargement lors des modifications de tags
                        
                        VStack(spacing: DesignSystem.spacing) {
                            // Bouton de configuration
                            ConfigButton(
                                isDarkMode: isDarkMode,
                                isEnabled: isConfiguratorAvailable,
                                onConfigPressed: {
                                    // Lancer le script Configurator3000
                                    launchConfiguratorScript()
                                    
                                    // D√©clencher le feu d'artifice centr√©
                                    showGlobalFirework = true
                                }
                            )
                            
                            // Section des scripts en cours d'ex√©cution
                            RunningScriptsView(
                                viewModel: runningScriptsVM,
                                isDarkMode: isDarkMode,
                                onScriptSelect: { scriptId in
                                    runningScriptsVM.selectScript(id: scriptId)
                                },
                                onScriptCancel: cancelScript
                            )
                            .frame(height: 150)
                            
                            // Section des r√©sultats
                            MultiResultSection(
                                viewModel: runningScriptsVM,
                                isDarkMode: isDarkMode
                            )
                            .frame(maxHeight: .infinity)
                        }
                    }
                    .padding(DesignSystem.spacing)
                }
            }
            .overlay(
                SimpleCenteredFirework(isVisible: $showGlobalFirework)
            )
        }
        .onAppear {
            loadScripts()
            loadFavorites()
            loadScriptTags()
            
            // Chargement des pr√©f√©rences depuis le gestionnaire de configuration
            isDarkMode = ConfigManager.shared.isDarkMode
            isGridView = ConfigManager.shared.isGridView
            targetFolderPath = ConfigManager.shared.folderPath
            
            setupNotificationObservers()
        }
        .onReceive(Just(isDarkMode)) { newValue in
            // Sauvegarde la pr√©f√©rence de th√®me dans le gestionnaire de configuration
            ConfigManager.shared.isDarkMode = newValue
        }
        .onReceive(Just(isGridView)) { newValue in
            // Sauvegarde la pr√©f√©rence de vue dans le gestionnaire de configuration
            ConfigManager.shared.isGridView = newValue
        }
        .sheet(isPresented: $showHelp) {
            HelpView(helpSections: helpSections, isDarkMode: isDarkMode)
        }
    }
    
    // MARK: - Views
    
    // Section des scripts (barre de recherche + liste + bouton)
    private var scriptsSection: some View {
        VStack(spacing: 0) {
            // S√©lecteur de dossier cible
            FolderSelector(
                currentPath: targetFolderPath,
                isDarkMode: isDarkMode,
                onFolderSelected: { newPath in
                    // Mettre √† jour le chemin dans ConfigManager
                    ConfigManager.shared.folderPath = newPath
                    
                    // Mettre √† jour l'√©tat local
                    targetFolderPath = newPath
                    
                    // Recharger les scripts
                    loadScripts()
                    
                    // Recharger les favoris
                    loadFavorites()
                    
                    // Recharger les tags des scripts
                    loadScriptTags()
                }
            )
            
            SearchBar(
                searchText: $searchText,
                showFavoritesOnly: $showFavoritesOnly,
                isDarkMode: $isDarkMode,
                showHelp: $showHelp,
                isGridView: $isGridView,
                isFocused: isSearchFieldFocused,
                onFocusChange: { newValue in
                    isSearchFieldFocused = newValue
                }
            )
            
            // Conditionnellement afficher la vue liste ou grille avec s√©lection multiple
            if isGridView {
                MultiselectScriptGridView(
                    scripts: scripts,
                    isDarkMode: isDarkMode,
                    showFavoritesOnly: showFavoritesOnly,
                    searchText: searchText,
                    tagsViewModel: tagsViewModel,
                    onToggleSelect: toggleScriptSelection,
                    onToggleFavorite: toggleFavorite,
                    onUpdateTags: updateScriptTags,
                    onSelectAll: selectAllScripts,
                    onUnselectAll: unselectAllScripts
                )
            } else {
                MultiselectScriptsList(
                    scripts: scripts,
                    isDarkMode: isDarkMode,
                    showFavoritesOnly: showFavoritesOnly,
                    searchText: searchText,
                    tagsViewModel: tagsViewModel,
                    onToggleSelect: toggleScriptSelection,
                    onToggleFavorite: toggleFavorite,
                    onUpdateTags: updateScriptTags,
                    onSelectAll: selectAllScripts,
                    onUnselectAll: unselectAllScripts
                )
            }
            
            // Bouton pour ex√©cuter tous les scripts s√©lectionn√©s
            ExecuteSelectedScriptsButton(
                selectedScriptsCount: selectedScriptsCount,
                isAnyScriptRunning: false,
                isDarkMode: isDarkMode,
                onExecute: executeSelectedScripts
            )
        }
        .background(DesignSystem.cardBackground(for: isDarkMode))
        .clipShape(RoundedRectangle(cornerRadius: DesignSystem.cornerRadius))
        .shadow(
            color: Color.black.opacity(DesignSystem.shadowOpacity(for: isDarkMode)),
            radius: DesignSystem.shadowRadius,
            x: 0,
            y: DesignSystem.shadowY
        )
    }
    
    // MARK: - Functions
    
    // Fonction pour mettre √† jour les tags d'un script
    private func updateScriptTags(_ updatedScript: ScriptFile) {
        if let index = scripts.firstIndex(where: { $0.id == updatedScript.id }) {
            scripts[index].tags = updatedScript.tags
            
            // Mettre √† jour les tags dans le ViewModel
            tagsViewModel.updateScriptTags(scriptPath: updatedScript.path, tags: updatedScript.tags)
            
            // Forcer le rafra√Æchissement des vues
            viewRefreshID = UUID()
        }
    }
    
    // Fonction pour charger les tags des scripts depuis le ViewModel
    private func loadScriptTags() {
        // Mettre √† jour chaque script avec ses tags
        for index in 0..<scripts.count {
            let scriptPath = scripts[index].path
            let tags = tagsViewModel.getTagsForScript(path: scriptPath)
            scripts[index].tags = tags
        }
    }
    
    // Fonction pour lancer le script Configurator3000
    private func launchConfiguratorScript() {
        let configuratorPath = (targetFolderPath as NSString).appendingPathComponent("Configurator3000.scpt")
        
        if FileManager.default.fileExists(atPath: configuratorPath) {
            // Cr√©er un ScriptFile factice pour le configurateur
            let configScript = ScriptFile(
                name: "Configurator3000.scpt",
                path: configuratorPath,
                isFavorite: false,
                lastExecuted: nil
            )
            
            // Utiliser la fonction d'ex√©cution existante
            executeScript(script: configScript)
        } else {
            print("Script Configurator3000 non trouv√© √†: \(configuratorPath)")
        }
    }
    
    // Configuration des observateurs de notifications
    private func setupNotificationObservers() {
        // Observateurs pour les commandes du menu
        NotificationCenter.default.addObserver(
            forName: NSNotification.Name("ExecuteSelectedScript"),
            object: nil,
            queue: .main
        ) { _ in
            if let script = selectedScript {
                executeScript(script: script)
            } else if selectedScriptsCount > 0 {
                executeSelectedScripts()
            }
        }
        
        NotificationCenter.default.addObserver(
            forName: NSNotification.Name("ToggleFavorite"),
            object: nil,
            queue: .main
        ) { _ in
            if let script = selectedScript {
                toggleFavorite(script)
            }
        }
        
        NotificationCenter.default.addObserver(
            forName: NSNotification.Name("ToggleViewMode"),
            object: nil,
            queue: .main
        ) { _ in
            isGridView.toggle()
        }
        
        NotificationCenter.default.addObserver(
            forName: NSNotification.Name("ToggleDarkMode"),
            object: nil,
            queue: .main
        ) { _ in
            isDarkMode.toggle()
        }
        
        NotificationCenter.default.addObserver(
            forName: NSNotification.Name("ToggleHelp"),
            object: nil,
            queue: .main
        ) { _ in
            showHelp.toggle()
        }
        
        // Ajout d'un nouvel observateur pour annuler tous les scripts
        NotificationCenter.default.addObserver(
            forName: NSNotification.Name("CancelAllScripts"),
            object: nil,
            queue: .main
        ) { _ in
            cancelAllScripts()
        }
        
        // Ajouter observateur pour la s√©lection de tous les scripts
        NotificationCenter.default.addObserver(
            forName: NSNotification.Name("SelectAllScripts"),
            object: nil,
            queue: .main
        ) { _ in
            selectAllScripts()
        }
        
        // Observateur pour les modifications globales des tags
        NotificationCenter.default.addObserver(
            forName: NSNotification.Name("GlobalTagsChanged"),
            object: nil,
            queue: .main
        ) { _ in
            // Forcer le rafra√Æchissement de l'interface
            viewRefreshID = UUID()
        }
    }
    
    // S√©lectionne tous les scripts visibles (filtres appliqu√©s)
    private func selectAllScripts() {
        let filtered = scripts.filter { script in
            let matchesSearch = searchText.isEmpty || script.name.localizedCaseInsensitiveContains(searchText)
            let matchesFavorite = !showFavoritesOnly || script.isFavorite
            return matchesSearch && matchesFavorite
        }
        
        for index in 0..<scripts.count {
            if filtered.contains(where: { $0.id == scripts[index].id }) {
                scripts[index].isSelected = true
            }
        }
    }
    
    // D√©s√©lectionne tous les scripts
    private func unselectAllScripts() {
        for index in 0..<scripts.count {
            scripts[index].isSelected = false
        }
    }
    
    // Bascule la s√©lection d'un script
    private func toggleScriptSelection(_ script: ScriptFile) {
        if let index = scripts.firstIndex(where: { $0.id == script.id }) {
            scripts[index].isSelected.toggle()
            
            // Maintenir la compatibilit√© avec selectedScript
            if scripts[index].isSelected && selectedScript == nil {
                selectedScript = scripts[index]
            } else if !scripts[index].isSelected && selectedScript?.id == script.id {
                // Si le script d√©s√©lectionn√© √©tait le selectedScript, trouver un autre script s√©lectionn√©
                selectedScript = scripts.first(where: { $0.isSelected })
            }
        }
    }
    
    // Annule tous les scripts en cours d'ex√©cution
    private func cancelAllScripts() {
        // Annuler tous les processus en cours
        scriptManager.cancelAllScripts()
        
        // Mettre √† jour le statut des scripts en cours d'ex√©cution
        for script in runningScriptsVM.scripts.filter({ $0.status == .running }) {
            runningScriptsVM.updateScript(
                id: script.id,
                output: script.output + "\n\nScript arr√™t√© par l'utilisateur.",
                status: .failed,
                endTime: Date()
            )
        }
    }
    
    // Annule un script sp√©cifique
    private func cancelScript(id: UUID) {
        // Arr√™ter le processus d'ex√©cution
        scriptManager.cancelScript(id: id)
        
        // Mettre √† jour le statut du script au lieu de le supprimer
        if let script = runningScriptsVM.scripts.first(where: { $0.id == id && $0.status == .running }) {
            runningScriptsVM.updateScript(
                id: id,
                output: script.output + "\n\nScript arr√™t√© par l'utilisateur.",
                status: .failed,
                endTime: Date()
            )
        }
    }
    
    // Ajoute ou supprime un script des favoris
    private func toggleFavorite(_ script: ScriptFile) {
        if let index = scripts.firstIndex(where: { $0.id == script.id }) {
            let wasSelected = selectedScript?.id == scripts[index].id
            scripts[index].isFavorite.toggle()
            saveFavorites()
            
            if wasSelected {
                selectedScript = scripts[index]
            }
        }
    }
    
    // Sauvegarde les favoris dans le gestionnaire de configuration
    private func saveFavorites() {
        let favoritePaths = Set(scripts.filter { $0.isFavorite }.map { $0.path })
        ConfigManager.shared.favorites = favoritePaths
    }
    
    // Charge les favoris depuis le gestionnaire de configuration
    private func loadFavorites() {
        let favoritesPaths = ConfigManager.shared.favorites
        for (index, script) in scripts.enumerated() where favoritesPaths.contains(script.path) {
            scripts[index].isFavorite = true
        }
    }
    
    // Charge les scripts depuis le dossier
    private func loadScripts() {
        let folderPath = targetFolderPath
        let fileManager = FileManager.default
        do {
            let files = try fileManager.contentsOfDirectory(atPath: folderPath)
            
            // Filtrer les scripts AppleScript mais exclure Configurator3000.scpt
            scripts = files
                .filter {
                    // Inclure seulement les fichiers .scpt et .applescript
                    ($0.hasSuffix(".scpt") || $0.hasSuffix(".applescript")) &&
                    // Mais exclure Configurator3000.scpt
                    $0 != "Configurator3000.scpt"
                }
                .map { ScriptFile(
                    name: $0,
                    path: (folderPath as NSString).appendingPathComponent($0),
                    isFavorite: false,
                    lastExecuted: nil,
                    isSelected: false
                )}
                .sorted { $0.name < $1.name }
            
            // V√©rifier si le configurateur est pr√©sent dans ce dossier
            let configuratorPath = (folderPath as NSString).appendingPathComponent("Configurator3000.scpt")
            isConfiguratorAvailable = fileManager.fileExists(atPath: configuratorPath)
            print("Configurateur trouv√©: \(isConfiguratorAvailable) √† \(configuratorPath)")
            
        } catch {
            errorMessage = "Erreur lors de la lecture du dossier: \(error.localizedDescription)"
            scripts = []
            isConfiguratorAvailable = false // Pas de configurateur si on ne peut pas lire le dossier
        }
    }
    
    // Ex√©cute un script sp√©cifique
    private func executeScript(script: ScriptFile) {
        // V√©rifier si ce script est d√©j√† dans la liste des scripts ex√©cut√©s
        if runningScriptsVM.scripts.contains(where: { $0.id == script.id }) {
            // Le script existe d√©j√† dans la liste, le r√©initialiser
            let now = Date()
            runningScriptsVM.updateScript(
                id: script.id,
                output: "D√©marrage d'une nouvelle ex√©cution...\n",
                status: .running,
                endTime: nil
            )
            // Mettre √† jour le temps de d√©marrage
            runningScriptsVM.resetScriptStartTime(id: script.id, startTime: now)
        } else {
            // Cr√©er un nouvel objet RunningScript
            let newRunningScript = RunningScript(
                id: script.id,
                name: script.name,
                startTime: Date(),
                output: "D√©marrage de l'ex√©cution...\n"
            )
            
            // Ajouter le script √† la liste des scripts en cours
            runningScriptsVM.addScript(newRunningScript)
        }
        
        // Mise √† jour de la date d'ex√©cution du script dans la liste principale
        if let index = self.scripts.firstIndex(where: { $0.id == script.id }) {
            self.scripts[index].lastExecuted = Date()
        }
        
        // Ex√©cuter le script et s'abonner aux mises √† jour
        let outputPublisher = scriptManager.executeScript(script: script)
        
        outputPublisher
            .receive(on: DispatchQueue.main)
            .sink { (scriptId, output, status, endTime) in
                // Mettre √† jour la sortie du script correspondant
                runningScriptsVM.updateScript(id: scriptId, output: output, status: status, endTime: endTime)
            }
            .store(in: &cancellables)
    }
    
    // Ex√©cute tous les scripts s√©lectionn√©s
    private func executeSelectedScripts() {
        let selectedScriptsList = scripts.filter { $0.isSelected }
        
        // Si aucun script n'est s√©lectionn√© mais qu'il y a un script "actif", l'ex√©cuter
        if selectedScriptsList.isEmpty, let script = selectedScript {
            executeScript(script: script)
            return
        }
        
        // Ex√©cuter chaque script s√©lectionn√©
        for script in selectedScriptsList {
            executeScript(script: script)
        }
        
        // Optionnel: d√©s√©lectionner tous les scripts apr√®s leur lancement
        // unselectAllScripts()
    }
}

// MARK: - Preview
#Preview("Content View - Multi Select") {
    ContentView()
        .frame(width: 1000, height: 650)
}

#Preview("Content View - Dark Mode") {
    ContentView()
        .frame(width: 1000, height: 650)
        .preferredColorScheme(.dark)
}
